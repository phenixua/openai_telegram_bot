from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from src.openapi_client import OpenAiClient
from src.utils import load_prompt

openai_client = OpenAiClient()

async def chat_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö—ñ–¥ —É —Ä–µ–∂–∏–º GPT-—á–∞—Ç"""
    context.user_data['mode'] = 'chat'
    keyboard = [[InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    target = update.message if update.message else update.callback_query.message
    await target.reply_text("üí¨ –í–∏ –≤ GPT-—á–∞—Ç—ñ. –ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:", reply_markup=reply_markup)

async def handle_chat_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É chat-—Ä–µ–∂–∏–º—ñ"""
    if context.user_data.get('mode') != 'chat':
        return
    user_text = update.message.text
    try:
        gpt_response = await openai_client.ask(user_text, load_prompt("gpt"))
        await update.message.reply_text(gpt_response)
    except Exception:
        await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
