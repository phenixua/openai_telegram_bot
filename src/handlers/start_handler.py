import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from src.utils import get_image_path

logging.basicConfig(level=logging.INFO)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é. –õ–æ–≥—ñ–∫–∞ 1-–≤-1 –∑ —Ç–≤–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –∫–æ–¥—É.
    """
    text_main = (
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –ø–æ—î–¥–Ω—É—î –≤ —Å–æ–±—ñ –∑—Ä—É—á–Ω—ñ—Å—Ç—å Telegram —Ç–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å ChatGPT\n\n"
        "–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n"
        "1. /start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞\n"
        "2. /random - –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç ¬∑ üß†\n"
        "3. /gpt - –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è ChatGPT ¬∑ ü§ñ\n"
        "4. /talk - –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é ¬∑ üë§\n"
        "5. /quiz - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è ‚ùì\n"
        "6. /recommend - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º–∏/–∫–Ω–∏–≥–∏/–º—É–∑–∏–∫–∞ üé¨üìöüéµ\n"
        "7. /translate - –ø–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É üåç"
    )

    image_path = get_image_path("main")

    keyboard = [
        [InlineKeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç", callback_data='random')],
        [InlineKeyboardButton("GPT-—á–∞—Ç", callback_data='gpt')],
        [InlineKeyboardButton("–†–æ–∑–º–æ–≤–∞ –∑ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é", callback_data='talk')],
        [InlineKeyboardButton("–ö–≤—ñ–∑", callback_data='quiz')],
        [InlineKeyboardButton("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º–∏/–∫–Ω–∏–≥–∏/–º—É–∑–∏–∫–∞", callback_data='recommend')],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á", callback_data='translate')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    target = update.message if update.message else update.callback_query.message
    try:
        if image_path:
            with open(image_path, 'rb') as photo:
                await target.reply_photo(
                    photo=photo,
                    caption=text_main,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        else:
            await target.reply_text(
                text_main,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logging.error(f"Error in start: {e}")
        await target.reply_text(text_main, reply_markup=reply_markup, parse_mode='Markdown')
