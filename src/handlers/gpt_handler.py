# src/handlers/gpt_handler.py
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from src.openapi_client import OpenAiClient
from src.utils import load_messages_for_bot, load_prompt

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞
openai_client = OpenAiClient()


async def chat_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∂–∏–º—É —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ GPT.
    –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ 'üí¨ –°–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ GPT'.
    """
    context.user_data['mode'] = 'gpt'
    text = load_messages_for_bot("gpt")
    keyboard = [[InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    target = update.message if update.message else update.callback_query.message
    await target.reply_text(text, reply_markup=reply_markup)


async def handle_gpt_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Ä–µ–∂–∏–º—ñ GPT.
    """
    user_mode = context.user_data.get('mode', '')
    if user_mode != 'gpt':
        return

    user_text = update.message.text
    prompt = load_prompt("gpt")

    try:
        gpt_response = await openai_client.ask(user_text, prompt)
        await update.message.reply_text(gpt_response)
    except Exception as e:
        logging.error(f"Error in GPT handler: {e}")
        await update.message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ GPT.")
