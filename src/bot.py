import logging
from telegram import BotCommand, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from config import TG_BOT_API_KEY
from handlers.start_handler import start
from handlers.gpt_handler import gpt_interface, handle_gpt_text
from handlers.random_handler import random_fact
from handlers.talk_handler import talk_with_personality

from utils import load_messages_for_bot, get_image_path
from openapi_client import OpenAiClient

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

logger = logging.getLogger(__name__)
openai_client = OpenAiClient()


# ----------------------- QUIZ -----------------------
async def quiz_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_messages_for_bot("quiz")
    image_path = get_image_path("quiz")

    keyboard = [
        [InlineKeyboardButton("–Ü—Å—Ç–æ—Ä—ñ—è", callback_data='quiz_history')],
        [InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data='quiz_science')],
        [InlineKeyboardButton("–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ", callback_data='quiz_art')],
        [InlineKeyboardButton("–°–ø–æ—Ä—Ç", callback_data='quiz_sport')],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    target = update.message if update.message else update.callback_query.message

    try:
        if image_path:
            with open(image_path, 'rb') as photo:
                await target.reply_photo(
                    photo=photo,
                    caption=text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
        else:
            await target.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"Error in quiz_game: {e}")
        await target.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )


# ----------------------- –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á -----------------------
async def recommend_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–§—ñ–ª—å–º–∏", callback_data='recommend_movies')],
        [InlineKeyboardButton("–ö–Ω–∏–≥–∏", callback_data='recommend_books')],
        [InlineKeyboardButton("–ú—É–∑–∏–∫–∞", callback_data='recommend_music')],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    target = update.message if update.message else update.callback_query.message
    await target.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)


# ----------------------- –ü–ï–†–ï–ö–õ–ê–î–ê–ß -----------------------
async def translate_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞", callback_data='translate_en')],
        [InlineKeyboardButton("–ù—ñ–º–µ—Ü—å–∫–∞", callback_data='translate_de')],
        [InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='translate_uk')],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data['mode'] = ''
    target = update.message if update.message else update.callback_query.message
    await target.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:", reply_markup=reply_markup)


# ======================= CALLBACK =======================
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    target = update.message if update.message else update.callback_query.message

    if data == 'start':
        context.user_data.clear()
        await start(update, context)

    elif data in ['random', 'random_again']:
        await random_fact(update, context)

    elif data == 'gpt':
        await gpt_interface(update, context)

    elif data == 'talk':
        await talk_with_personality(update, context)

    elif data.startswith('talk_'):
        context.user_data['mode'] = data
        await talk_with_personality(update, context)

    elif data == 'quiz':
        await quiz_game(update, context)

    elif data.startswith('quiz_'):
        context.user_data['mode'] = data
        await quiz_game(update, context)

    elif data == 'recommend':
        await recommend_menu(update, context)

    elif data.startswith('recommend_'):
        category = data.split('_')[1]
        context.user_data['recommend_category'] = category
        context.user_data['mode'] = 'recommend_genre'
        await target.reply_text(f"–í–≤–µ–¥—ñ—Ç—å –∂–∞–Ω—Ä –¥–ª—è {category}:")

    elif data == 'translate':
        await translate_menu(update, context)

    elif data.startswith('translate_'):
        lang_map = {'translate_en': '–∞–Ω–≥–ª—ñ–π—Å—å–∫—É', 'translate_de': '–Ω—ñ–º–µ—Ü—å–∫—É', 'translate_uk': '—É–∫—Ä–∞—ó–Ω—Å—å–∫—É'}
        context.user_data['mode'] = f"translate_{data.split('_')[1]}"
        await target.reply_text(f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —ñ —è –ø–µ—Ä–µ–∫–ª–∞–¥—É –π–æ–≥–æ –Ω–∞ {lang_map[data]}.")


# ======================= TEXT =======================
async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_mode = context.user_data.get('mode', '')
    if user_mode == 'gpt':
        await handle_gpt_text(update, context)
    else:
        await update.message.reply_text("–†–µ–∂–∏–º —â–µ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.")


# ======================= RUN =======================
async def post_init(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞"),
        BotCommand("random", "–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç ¬∑ üß†"),
        BotCommand("gpt", "GPT-—á–∞—Ç ¬∑ ü§ñ"),
        BotCommand("talk", "–†–æ–∑–º–æ–≤–∞ –∑ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é ¬∑ üë§"),
        BotCommand("quiz", "–ö–≤—ñ–∑ ¬∑ ‚ùì"),
        BotCommand("recommend", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º–∏/–∫–Ω–∏–≥–∏/–º—É–∑–∏–∫–∞ üé¨üìöüéµ"),
        BotCommand("translate", "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á üåç")
    ])


app = ApplicationBuilder().token(TG_BOT_API_KEY).post_init(post_init).build()

# –ö–æ–º–∞–Ω–¥–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("random", random_fact))
app.add_handler(CommandHandler("gpt", gpt_interface))
app.add_handler(CommandHandler("talk", talk_with_personality))
app.add_handler(CommandHandler("quiz", quiz_game))
app.add_handler(CommandHandler("recommend", recommend_menu))
app.add_handler(CommandHandler("translate", translate_menu))

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

# Callback –∫–Ω–æ–ø–∫–∏
app.add_handler(CallbackQueryHandler(handle_callback))

if __name__ == "__main__":
    app.run_polling()
