from config import TG_BOT_API_KEY
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)
from utils import load_messages_for_bot, load_prompt, get_image_path
from openapi_client import OpenAiClient
import logging

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

openai_client = OpenAiClient()


# ======================= –§–£–ù–ö–¶–Ü–á =======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_main = (
        "–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –ø–æ—î–¥–Ω—É—î –≤ —Å–æ–±—ñ –∑—Ä—É—á–Ω—ñ—Å—Ç—å Telegram —Ç–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å ChatGPT\n\n"
        "–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:\n"
        "1. /start ‚Äî –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞\n"
        "2. /random - –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç ¬∑ üß†\n"
        "3. /gpt - –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è ChatGPT ¬∑ ü§ñ\n"
        "4. /talk - –ø–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ –≤—ñ–¥–æ–º–æ—é –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é ¬∑ üë§\n"
        "5. /quiz - –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è ‚ùì\n"
        "6. /recommend - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º–∏/–∫–Ω–∏–≥–∏/–º—É–∑–∏–∫–∞ üé¨üìöüéµ\n"
        "7. /translate - –ø–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É üåç"
    )
    image_path = get_image_path("main")

    keyboard = [
        [InlineKeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç", callback_data='random')],
        [InlineKeyboardButton("GPT-—á–∞—Ç", callback_data='gpt')],
        [InlineKeyboardButton("–†–æ–∑–º–æ–≤–∞ –∑ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é", callback_data='talk')],
        [InlineKeyboardButton("–ö–≤—ñ–∑", callback_data='quiz')],
        [InlineKeyboardButton("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º–∏/–∫–Ω–∏–≥–∏/–º—É–∑–∏–∫–∞", callback_data='recommend')],
        [InlineKeyboardButton("–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á", callback_data='translate')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    target = update.message if update.message else update.callback_query.message
    try:
        if image_path:
            with open(image_path, 'rb') as photo:
                await target.reply_photo(photo=photo, caption=text_main, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await target.reply_text(text_main, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"Error in start: {e}")
        await target.reply_text(text_main, reply_markup=reply_markup, parse_mode='Markdown')


# ----------------------- –†–ê–ù–î–û–ú -----------------------
async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_messages_for_bot("random")
    prompt = load_prompt("random")
    image_path = get_image_path("random")

    keyboard = [
        [InlineKeyboardButton("–•–æ—á—É —â–µ —Ñ–∞–∫—Ç", callback_data='random_again')],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        gpt_response = await openai_client.ask("", prompt)
        target = update.message if update.message else update.callback_query.message
        if image_path:
            with open(image_path, 'rb') as photo:
                await target.reply_photo(photo=photo, caption=f"{text}\n\n{gpt_response}", reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await target.reply_text(f"{text}\n\n{gpt_response}", reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"Error in random_fact: {e}")
        target = update.message if update.message else update.callback_query.message
        await target.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# ----------------------- GPT -----------------------
async def gpt_interface(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_messages_for_bot("gpt")
    image_path = get_image_path("gpt")
    context.user_data['mode'] = 'gpt'

    keyboard = [[InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    target = update.message if update.message else update.callback_query.message
    try:
        if image_path:
            with open(image_path, 'rb') as photo:
                await target.reply_photo(photo=photo, caption=text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await target.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"Error in gpt_interface: {e}")
        await target.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')


# ----------------------- TALK -----------------------
async def talk_with_personality(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_messages_for_bot("talk")
    image_path = get_image_path("talk")

    keyboard = [
        [InlineKeyboardButton("–ö—É—Ä—Ç –ö–æ–±–µ–π–Ω", callback_data='talk_cobain')],
        [InlineKeyboardButton("–°—Ç—ñ–≤–µ–Ω –•–æ–∫—ñ–Ω–≥", callback_data='talk_hawking')],
        [InlineKeyboardButton("–§—Ä—ñ–¥—Ä—ñ—Ö –ù—ñ—Ü—à–µ", callback_data='talk_nietzsche')],
        [InlineKeyboardButton("–§—Ä–µ–¥–¥—ñ –ú–µ—Ä–∫'—é—Ä—ñ", callback_data='talk_queen')],
        [InlineKeyboardButton("–î–∂.–†.–†. –¢–æ–ª–∫—ñ–Ω", callback_data='talk_tolkien')],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    target = update.message if update.message else update.callback_query.message
    try:
        if image_path:
            with open(image_path, 'rb') as photo:
                await target.reply_photo(photo=photo, caption=text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await target.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"Error in talk_with_personality: {e}")
        await target.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')


# ----------------------- QUIZ -----------------------
async def quiz_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_messages_for_bot("quiz")
    image_path = get_image_path("quiz")

    keyboard = [
        [InlineKeyboardButton("–Ü—Å—Ç–æ—Ä—ñ—è", callback_data='quiz_history')],
        [InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data='quiz_science')],
        [InlineKeyboardButton("–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ", callback_data='quiz_art')],
        [InlineKeyboardButton("–°–ø–æ—Ä—Ç", callback_data='quiz_sport')],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    target = update.message if update.message else update.callback_query.message
    try:
        if image_path:
            with open(image_path, 'rb') as photo:
                await target.reply_photo(photo=photo, caption=text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await target.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    except Exception as e:
        logging.error(f"Error in quiz_game: {e}")
        await target.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')


# ----------------------- –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á -----------------------
async def recommend_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–§—ñ–ª—å–º–∏", callback_data='recommend_movies')],
        [InlineKeyboardButton("–ö–Ω–∏–≥–∏", callback_data='recommend_books')],
        [InlineKeyboardButton("–ú—É–∑–∏–∫–∞", callback_data='recommend_music')],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    target = update.message if update.message else update.callback_query.message
    await target.reply_text("–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=reply_markup)


# ----------------------- –ü–ï–†–ï–ö–õ–ê–î–ê–ß -----------------------
async def translate_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞", callback_data='translate_en')],
        [InlineKeyboardButton("–ù—ñ–º–µ—Ü—å–∫–∞", callback_data='translate_de')],
        [InlineKeyboardButton("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data='translate_uk')],
        [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.user_data['mode'] = ''
    target = update.message if update.message else update.callback_query.message
    await target.reply_text("–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:", reply_markup=reply_markup)


# ======================= CALLBACK =======================
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'start':
        context.user_data.clear()
        await start(update, context)

    elif data in ['random', 'random_again']:
        await random_fact(update, context)

    elif data == 'gpt':
        await gpt_interface(update, context)

    elif data == 'talk':
        await talk_with_personality(update, context)

    elif data.startswith('talk_'):
        personality_map = {
            'talk_cobain': 'cobain',
            'talk_hawking': 'hawking',
            'talk_nietzsche': 'nietzsche',
            'talk_queen': 'queen',
            'talk_tolkien': 'tolkien'
        }
        context.user_data['mode'] = data
        personality = personality_map[data]
        image_path = get_image_path(f"talk_{personality}")
        keyboard = [[InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            if image_path:
                with open(image_path, 'rb') as photo:
                    await query.message.reply_photo(photo=photo, caption="–ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É! –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=reply_markup)
            else:
                await query.message.reply_text("–ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É! –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=reply_markup)
        except Exception as e:
            logging.error(f"Error in talk callback: {e}")
            await query.message.reply_text("–ú–æ–∂–µ—Ç–µ –ø–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É! –ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.", reply_markup=reply_markup)

    elif data == 'quiz':
        await quiz_game(update, context)

    elif data.startswith('quiz_'):
        if data == 'quiz_change_topic':
            await quiz_game(update, context)
            return
        context.user_data['mode'] = data
        topic = data.split('_')[1]
        if 'score' not in context.user_data:
            context.user_data['score'] = 0
        topic_prompts = {
            'history': '–°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ —ñ—Å—Ç–æ—Ä—ñ—ó –∑ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –§–æ—Ä–º–∞—Ç: –ü–∏—Ç–∞–Ω–Ω—è? A) ... B) ... C) ... D) ...',
            'science': '–°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –Ω–∞—É–∫–∏ –∑ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –§–æ—Ä–º–∞—Ç: –ü–∏—Ç–∞–Ω–Ω—è? A) ... B) ... C) ... D) ...',
            'art': '–°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –º–∏—Å—Ç–µ—Ü—Ç–≤–∞ –∑ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –§–æ—Ä–º–∞—Ç: –ü–∏—Ç–∞–Ω–Ω—è? A) ... B) ... C) ... D) ...',
            'sport': '–°—Ç–≤–æ—Ä–∏ –æ–¥–Ω–µ —Ü—ñ–∫–∞–≤–µ –ø–∏—Ç–∞–Ω–Ω—è –∑—ñ —Å–ø–æ—Ä—Ç—É –∑ 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –§–æ—Ä–º–∞—Ç: –ü–∏—Ç–∞–Ω–Ω—è? A) ... B) ... C) ... D) ...'
        }
        try:
            gpt_response = await openai_client.ask(topic_prompts[topic], load_prompt("quiz"))
            context.user_data['quiz_question'] = gpt_response
            await query.message.reply_text(f"{gpt_response}\n\n–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (A, B, C –∞–±–æ D):")
        except Exception as e:
            logging.error(f"Error in quiz: {e}")
            await query.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    elif data == 'recommend':
        await recommend_menu(update, context)

    elif data.startswith('recommend_'):
        category = data.split('_')[1]
        context.user_data['recommend_category'] = category
        context.user_data['mode'] = 'recommend_genre'
        target = update.message if update.message else update.callback_query.message
        await target.reply_text(f"–í–≤–µ–¥—ñ—Ç—å –∂–∞–Ω—Ä –¥–ª—è {category}:")

    elif data == 'translate':
        await translate_menu(update, context)

    elif data.startswith('translate_'):
        lang_map = {
            'translate_en': '–∞–Ω–≥–ª—ñ–π—Å—å–∫—É',
            'translate_de': '–Ω—ñ–º–µ—Ü—å–∫—É',
            'translate_uk': '—É–∫—Ä–∞—ó–Ω—Å—å–∫—É'
        }
        context.user_data['mode'] = f"translate_{data.split('_')[1]}"
        await query.message.reply_text(f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–µ–∫—Å—Ç, —ñ —è –ø–µ—Ä–µ–∫–ª–∞–¥—É –π–æ–≥–æ –Ω–∞ {lang_map[data]}.")


# ======================= TEXT =======================
async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_mode = context.user_data.get('mode', '')
    user_text = update.message.text

    if user_mode == 'gpt':
        prompt = load_prompt("gpt")
        try:
            gpt_response = await openai_client.ask(user_text, prompt)
            await update.message.reply_text(gpt_response)
        except Exception as e:
            logging.error(f"Error in gpt mode: {e}")
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    elif user_mode.startswith('talk'):
        personality = user_mode.split('_')[1]
        prompt = load_prompt(f"talk_{personality}")
        keyboard = [[InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        try:
            gpt_response = await openai_client.ask(user_text, prompt)
            await update.message.reply_text(gpt_response, reply_markup=reply_markup)
        except Exception as e:
            logging.error(f"Error in talk mode: {e}")
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    elif user_mode.startswith('quiz'):
        topic = user_mode.split('_')[1]
        score = context.user_data.get('score', 0)
        if 'quiz_question' in context.user_data:
            try:
                check_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–ø–æ–≤—ñ–≤: '{user_text}' –Ω–∞ –ø–∏—Ç–∞–Ω–Ω—è: '{context.user_data['quiz_question']}'. –°–∫–∞–∂–∏ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å (—Ç–∞–∫/–Ω—ñ) —Ç–∞ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è."
                gpt_response = await openai_client.ask(check_prompt, "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –∫–≤—ñ–∑—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä—è–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
                is_correct = "—Ç–∞–∫" in gpt_response.lower() or "–ø—Ä–∞–≤–∏–ª—å–Ω" in gpt_response.lower()
                if is_correct:
                    context.user_data['score'] = score + 1
                current_score = context.user_data.get('score', 0)
                keyboard = [
                    [InlineKeyboardButton("–©–µ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'quiz_{topic}')],
                    [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ç–µ–º—É", callback_data='quiz_change_topic')],
                    [InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(f"{gpt_response}\n\n–í–∞—à —Ä–∞—Ö—É–Ω–æ–∫: {current_score}", reply_markup=reply_markup)
                del context.user_data['quiz_question']
            except Exception as e:
                logging.error(f"Error in quiz mode: {e}")
                await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    elif user_mode == 'recommend_genre':
        category = context.user_data.get('recommend_category', '')
        prompt = f"–ü–æ—Ä–∞–¥—É–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {category} –∑–∞ –∂–∞–Ω—Ä–æ–º {user_text}, –¥–∞–π 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É."
        try:
            gpt_response = await openai_client.ask(prompt, "")
            keyboard = [[InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(gpt_response, reply_markup=reply_markup)
        except Exception as e:
            logging.error(f"Error in recommend mode: {e}")
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

    elif user_mode.startswith('translate'):
        lang_code = user_mode.split('_')[1]
        lang_map = {
            'en': '–∞–Ω–≥–ª—ñ–π—Å—å–∫—É',
            'de': '–Ω—ñ–º–µ—Ü—å–∫—É',
            'uk': '—É–∫—Ä–∞—ó–Ω—Å—å–∫—É'
        }
        prompt = f"–ü–µ—Ä–µ–∫–ª–∞–¥–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ {lang_map[lang_code]}:\n\n{user_text}"
        try:
            gpt_response = await openai_client.ask(prompt, "")
            keyboard = [[InlineKeyboardButton("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='start')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(gpt_response, reply_markup=reply_markup)
        except Exception as e:
            logging.error(f"Error in translate mode: {e}")
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# ======================= RUN =======================
async def post_init(application):
    await application.bot.set_my_commands([
        BotCommand("start", "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –±–æ—Ç–∞"),
        BotCommand("random", "–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—Ç ¬∑ üß†"),
        BotCommand("gpt", "GPT-—á–∞—Ç ¬∑ ü§ñ"),
        BotCommand("talk", "–†–æ–∑–º–æ–≤–∞ –∑ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—é ¬∑ üë§"),
        BotCommand("quiz", "–ö–≤—ñ–∑ ¬∑ ‚ùì"),
        BotCommand("recommend", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ñ—ñ–ª—å–º–∏/–∫–Ω–∏–≥–∏/–º—É–∑–∏–∫–∞ üé¨üìöüéµ"),
        BotCommand("translate", "–ü–µ—Ä–µ–∫–ª–∞–¥–∞—á üåç")
    ])


app = ApplicationBuilder().token(TG_BOT_API_KEY).post_init(post_init).build()

# –ö–æ–º–∞–Ω–¥–∏
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("random", random_fact))
app.add_handler(CommandHandler("gpt", gpt_interface))
app.add_handler(CommandHandler("talk", talk_with_personality))
app.add_handler(CommandHandler("quiz", quiz_game))
app.add_handler(CommandHandler("recommend", recommend_menu))
app.add_handler(CommandHandler("translate", translate_menu))

# –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

# Callback –∫–Ω–æ–ø–∫–∏
app.add_handler(CallbackQueryHandler(handle_callback))

app.run_polling()
